#poulakis method
reset()
def poulakis(a,b,c,d):
    A_positive = a - 8*c + 4*a*b - a^3 
    B_positive = 8*b - 2*a^2 + 1 - 64*d + 16 * b^2 + a^4 - 8*b*a^2
    A_negative = a + 8*c - 4*a*b + a^3 
    B_negative = 8*b - 2*a^2 - 1 + 64*d - 16 * b^2 - a^4 + 8*b*a^2
    Delta1 = 64*(A_positive^2-B_positive)
    Delta2 = 64*(A_negative^2-B_negative)
    if Delta1>=0:
        delta1=sqrt(Delta2)
        L1 = -(8*A_positive + delta1)/32
        R1 = (-8*A_positive + delta1)/32
        print ceil(L1.n()),floor(R1.n())
    if Delta2>=0:
        delta2=sqrt(Delta2)
        L2 = -(8*A_negative + delta2)/32
        R2 = (-8*A_negative + delta2)/32
        print ceil(L2.n()),floor(R2.n())
 # It is easy to compute the intervals for the curve y^2=x^4-2^ell *x^2 + 1.
 # The intervals are (in fact is one interval) [-2^ell,2^ell]
 # With our method it is enough to check that it is practical to compute all the factorization (and so to find the divisors) of 
 # 2^(2*ell) - 4.
 []
   
